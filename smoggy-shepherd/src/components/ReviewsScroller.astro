---
import reviews from "../data/reviews.json";

type Review = {
  author_name: string;
  profile_photo_url?: string | null;
  rating: number;
  date?: string | null;
  text?: string | null;
  owner_response?: string | null;
};

const allReviews = (reviews as Review[]).map((r, index) => ({ ...r, _idx: index }));

function getStarStrings(rating: number) {
  const safe = Math.max(0, Math.min(5, Math.round(rating)));
  const filled = "★".repeat(safe);
  const empty = "☆".repeat(5 - safe);
  return { filled, empty, safe };
}

// Build JSON-LD for Review rich results. Exclude entries without review text.
const jsonLd = {
  "@context": "https://schema.org",
  "@graph": allReviews
    .filter((r) => typeof r.text === "string" && r.text && r.text.trim().length > 0)
    .map((r) => {
      const base: Record<string, unknown> = {
        "@type": "Review",
        author: { "@type": "Person", name: r.author_name },
        reviewBody: r.text,
        reviewRating: {
          "@type": "Rating",
          ratingValue: r.rating,
          bestRating: 5,
        },
        itemReviewed: {
          "@type": "LocalBusiness",
          name: "Alex Flooring & Carpentry LLC",
        },
      };
      if (r.date && /\d/.test(r.date)) {
        // Keep original date if present; schema will accept non-ISO, but it's optional
        (base as any).datePublished = r.date;
      }
      if (r.owner_response && r.owner_response.trim().length > 0) {
        (base as any).comment = {
          "@type": "Comment",
          text: r.owner_response,
          author: { "@type": "Organization", name: "Alex Flooring & Carpentry LLC" },
        };
      }
      return base;
    }),
};
const preparedReviews = allReviews.map((r) => {
  const { filled, empty, safe } = getStarStrings(r.rating);
  return {
    ...r,
    filled,
    empty,
    safe,
    headingId: `review-heading-${r._idx}`,
    isHidden: r._idx >= 5,
  };
});
---
<section class="w-full" aria-label="Customer reviews">
<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-10">
<header class="mb-6">
			<p class="mt-2 text-sm leading-5 text-gray-600" aria-live="polite" id="reviews-count" data-initial="5">Showing 5 of {allReviews.length}</p>
		</header>

<div class="rounded-lg bg-slate-50 p-4 sm:p-6">
<div class="max-h-[70vh] overflow-y-auto pr-1" id="reviews-region" role="region" aria-label="Reviews list">
<ul role="list" class="space-y-4" id="reviews-list">
					{preparedReviews.map((review) => (
						<li data-index={review._idx} class={`transition-opacity ${review.isHidden ? "hidden" : ""}`}>
							<article class="bg-neutral rounded-lg border border-primary/10 shadow-sm p-4 sm:p-6" aria-labelledby={review.headingId}>
								<div class="flex flex-col items-center text-center">
									<img
										src={review.profile_photo_url || ""}
										alt={`Profile picture of ${review.author_name}`}
										class="object-cover rounded-full w-10 h-10"
										loading="lazy"
										decoding="async"
										width="40"
										height="40"
										onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
									/>
									<div style="display:none" class="flex items-center justify-center rounded-full bg-primary/20 text-primary font-semibold w-10 h-10">
										{review.author_name?.charAt(0).toUpperCase() || "?"}
									</div>
									<h3 id={review.headingId} class="mt-2 text-base sm:text-lg font-semibold text-primary">
										{review.author_name}
									</h3>
									<div class="mt-1 flex items-center justify-center gap-2" aria-label={`Rating: ${review.safe} out of 5`}>
										<span class="text-accent text-lg" aria-hidden="true">{review.filled}<span class="opacity-30">{review.empty}</span></span>
										{review.date && (<time class="text-xs leading-5 text-gray-600">{review.date}</time>)}
									</div>
									{review.text && (
										<p class="mt-3 text-sm sm:text-base leading-relaxed text-gray-800 text-left">{review.text}</p>
									)}
									{(review.owner_response?.trim()?.length ?? 0) > 0 && (
										<div class="mt-4 rounded-md border border-primary/10 bg-primary/5 p-3 text-left" aria-label="Owner response">
											<p class="text-sm leading-6 text-gray-800"><span class="font-semibold text-primary">Owner response:</span> {review.owner_response}</p>
										</div>
									)}
								</div>
							</article>
						</li>
					))}
				</ul>
</div>

<div class="mt-6 flex justify-center">
<button id="load-more-reviews" type="button" class="inline-flex items-center rounded-md bg-primary px-5 py-2.5 text-sm font-semibold text-neutral shadow-sm hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-accent" aria-controls="reviews-list" aria-expanded="false">
Load more
</button>
</div>
</div>
</div>

<script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
</section>

<script type="module">
	const LIST_ID = "reviews-list";
	const BUTTON_ID = "load-more-reviews";
	const COUNT_ID = "reviews-count";
	const STEP = 5;

	const list = document.getElementById(LIST_ID);
	const button = document.getElementById(BUTTON_ID);
	const count = document.getElementById(COUNT_ID);

	let visible = 5;

	function updateVisibility() {
		if (!list) return;
		const items = Array.from(list.querySelectorAll("[data-index]"));
		items.forEach((el) => {
			const idx = Number(el.getAttribute("data-index") || 0);
			el.classList.toggle("hidden", idx >= visible);
		});
		const total = items.length;
		if (count) count.textContent = `Showing ${Math.min(visible, total)} of ${total}`;
		if (button) {
			const done = visible >= total;
			button.setAttribute("aria-expanded", done ? "true" : "false");
			if (done) {
				button.setAttribute("disabled", "true");
				button.classList.add("opacity-60", "cursor-not-allowed");
				button.textContent = "All reviews shown";
			} else {
				button.removeAttribute("disabled");
				button.classList.remove("opacity-60", "cursor-not-allowed");
				button.textContent = "Load more";
			}
		}
	}

	if (button) {
		button.addEventListener("click", () => {
			visible += STEP;
			updateVisibility();
		});
	}

	updateVisibility();
</script>